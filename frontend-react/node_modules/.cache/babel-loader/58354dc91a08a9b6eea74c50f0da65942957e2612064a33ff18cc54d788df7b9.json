{"ast":null,"code":"\"use strict\";\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { omit } from '../utils/omit.js';\nconst shallowEqual = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    const aKeys = Object.keys(a[i]);\n    const bKeys = Object.keys(b[i]);\n    if (aKeys.length !== bKeys.length) return false;\n    for (const key of aKeys) {\n      if (!Object.is(a[i][key], b[i][key])) return false;\n    }\n  }\n  return true;\n};\nfunction createOverlay(Component, options) {\n  const map = /* @__PURE__ */new Map();\n  const exitPromises = /* @__PURE__ */new Map();\n  const subscribers = /* @__PURE__ */new Set();\n  const subscribe = callback => {\n    subscribers.add(callback);\n    return () => subscribers.delete(callback);\n  };\n  const publish = () => {\n    for (const callback of subscribers) {\n      callback(getSnapshot());\n    }\n  };\n  let lastSnapshot = [];\n  const getSnapshot = () => {\n    const nextSnapshot = Array.from(map.values());\n    if (shallowEqual(lastSnapshot, nextSnapshot)) return lastSnapshot;\n    lastSnapshot = nextSnapshot;\n    return lastSnapshot;\n  };\n  const waitForExit = id => {\n    return exitPromises.get(id) || Promise.resolve();\n  };\n  const open = (id, props) => {\n    const overlayProps = {\n      ...options?.props,\n      ...props,\n      open: true,\n      onOpenChange: e => {\n        if (!e.open) close(id);\n      },\n      onExitComplete: () => {\n        const overlay = get(id);\n        if (overlay.setExitComplete) {\n          overlay.setExitComplete();\n          overlay.setExitComplete = void 0;\n        }\n        remove(id);\n      },\n      setReturnValue: void 0,\n      setExitComplete: void 0\n    };\n    map.set(id, overlayProps);\n    const prom = new Promise(resolve => {\n      map.set(id, {\n        ...overlayProps,\n        setReturnValue: resolve\n      });\n    });\n    publish();\n    return prom;\n  };\n  const close = (id, value) => {\n    const prevProps = get(id);\n    map.set(id, {\n      ...prevProps,\n      open: false\n    });\n    if (prevProps.setReturnValue) {\n      prevProps.setReturnValue(value);\n      prevProps.setReturnValue = void 0;\n    }\n    publish();\n    const exitPromise = new Promise(resolve => {\n      const overlay = get(id);\n      map.set(id, {\n        ...overlay,\n        setExitComplete: resolve\n      });\n    });\n    exitPromises.set(id, exitPromise);\n    return exitPromise;\n  };\n  const remove = id => {\n    map.delete(id);\n    exitPromises.delete(id);\n    publish();\n  };\n  const update = (id, props) => {\n    const prevProps = get(id);\n    map.set(id, {\n      ...prevProps,\n      ...omit(props, [\"open\", \"onOpenChange\", \"onExitComplete\"])\n    });\n    publish();\n  };\n  const get = id => {\n    const overlay = map.get(id);\n    if (!overlay) {\n      throw new Error(`[chakra-ui] Overlay with id ${id} not found`);\n    }\n    return overlay;\n  };\n  const removeAll = () => {\n    map.clear();\n    exitPromises.clear();\n    publish();\n  };\n  function Viewport() {\n    const overlays = React.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);\n    return /* @__PURE__ */jsx(Fragment, {\n      children: overlays.map((props, index) =>\n      // @ts-expect-error - TODO: fix this\n      /* @__PURE__ */\n      jsx(Component, {\n        ...props\n      }, index))\n    });\n  }\n  return {\n    Viewport,\n    open,\n    close,\n    update,\n    remove,\n    removeAll,\n    get,\n    getSnapshot,\n    waitForExit\n  };\n}\nexport { createOverlay };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}