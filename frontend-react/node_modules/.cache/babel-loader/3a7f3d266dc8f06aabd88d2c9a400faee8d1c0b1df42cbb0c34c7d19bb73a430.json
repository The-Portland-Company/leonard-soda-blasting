{"ast":null,"code":"export function updateSEOTags(seoData) {\n  // Only update title if provided (let Helmet handle it otherwise)\n  if (seoData.title) {\n    const title = seoData.title;\n    document.title = title;\n\n    // Also update the title meta tag if it exists\n    let titleMeta = document.querySelector('meta[name=\"title\"]');\n    if (!titleMeta) {\n      titleMeta = document.createElement('meta');\n      titleMeta.name = 'title';\n      document.head.appendChild(titleMeta);\n    }\n    titleMeta.content = title;\n  }\n\n  // Update meta description\n  const metaDescription = document.querySelector('meta[name=\"description\"]');\n  if (metaDescription && seoData.description) {\n    metaDescription.content = seoData.description;\n  }\n\n  // Update or create meta keywords\n  if (seoData.keywords) {\n    let metaKeywords = document.querySelector('meta[name=\"keywords\"]');\n    if (!metaKeywords) {\n      metaKeywords = document.createElement('meta');\n      metaKeywords.name = 'keywords';\n      document.head.appendChild(metaKeywords);\n    }\n    metaKeywords.content = seoData.keywords;\n  }\n\n  // Update or create Open Graph meta tags\n  if (seoData.ogTitle) {\n    let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n    if (!ogTitle) {\n      ogTitle = document.createElement('meta');\n      ogTitle.setAttribute('property', 'og:title');\n      document.head.appendChild(ogTitle);\n    }\n    ogTitle.content = seoData.ogTitle;\n  }\n  if (seoData.ogDescription) {\n    let ogDescription = document.querySelector('meta[property=\"og:description\"]');\n    if (!ogDescription) {\n      ogDescription = document.createElement('meta');\n      ogDescription.setAttribute('property', 'og:description');\n      document.head.appendChild(ogDescription);\n    }\n    ogDescription.content = seoData.ogDescription;\n  }\n  if (seoData.ogImage) {\n    let ogImage = document.querySelector('meta[property=\"og:image\"]');\n    if (!ogImage) {\n      ogImage = document.createElement('meta');\n      ogImage.setAttribute('property', 'og:image');\n      document.head.appendChild(ogImage);\n    }\n    ogImage.content = seoData.ogImage;\n  }\n}\nexport function createPageSEO(page, settings) {\n  const title = (page === null || page === void 0 ? void 0 : page.meta_title) || (settings === null || settings === void 0 ? void 0 : settings.site_title);\n  const description = (page === null || page === void 0 ? void 0 : page.meta_description) || (settings === null || settings === void 0 ? void 0 : settings.site_description);\n  return {\n    title,\n    description,\n    ogTitle: title,\n    ogDescription: description\n  };\n}","map":{"version":3,"names":["updateSEOTags","seoData","title","document","titleMeta","querySelector","createElement","name","head","appendChild","content","metaDescription","description","keywords","metaKeywords","ogTitle","setAttribute","ogDescription","ogImage","createPageSEO","page","settings","meta_title","site_title","meta_description","site_description"],"sources":["/Users/spencerhill/Sites/leonard-soda-blasting/frontend-react/src/utils/seo.ts"],"sourcesContent":["interface SEOData {\n  title?: string;\n  description?: string;\n  keywords?: string;\n  ogTitle?: string;\n  ogDescription?: string;\n  ogImage?: string;\n}\n\nexport function updateSEOTags(seoData: SEOData) {\n  // Only update title if provided (let Helmet handle it otherwise)\n  if (seoData.title) {\n    const title = seoData.title;\n    document.title = title;\n    \n    // Also update the title meta tag if it exists\n    let titleMeta = document.querySelector('meta[name=\"title\"]') as HTMLMetaElement;\n    if (!titleMeta) {\n      titleMeta = document.createElement('meta');\n      titleMeta.name = 'title';\n      document.head.appendChild(titleMeta);\n    }\n    titleMeta.content = title;\n  }\n\n  // Update meta description\n  const metaDescription = document.querySelector('meta[name=\"description\"]') as HTMLMetaElement;\n  if (metaDescription && seoData.description) {\n    metaDescription.content = seoData.description;\n  }\n\n  // Update or create meta keywords\n  if (seoData.keywords) {\n    let metaKeywords = document.querySelector('meta[name=\"keywords\"]') as HTMLMetaElement;\n    if (!metaKeywords) {\n      metaKeywords = document.createElement('meta');\n      metaKeywords.name = 'keywords';\n      document.head.appendChild(metaKeywords);\n    }\n    metaKeywords.content = seoData.keywords;\n  }\n\n  // Update or create Open Graph meta tags\n  if (seoData.ogTitle) {\n    let ogTitle = document.querySelector('meta[property=\"og:title\"]') as HTMLMetaElement;\n    if (!ogTitle) {\n      ogTitle = document.createElement('meta');\n      ogTitle.setAttribute('property', 'og:title');\n      document.head.appendChild(ogTitle);\n    }\n    ogTitle.content = seoData.ogTitle;\n  }\n\n  if (seoData.ogDescription) {\n    let ogDescription = document.querySelector('meta[property=\"og:description\"]') as HTMLMetaElement;\n    if (!ogDescription) {\n      ogDescription = document.createElement('meta');\n      ogDescription.setAttribute('property', 'og:description');\n      document.head.appendChild(ogDescription);\n    }\n    ogDescription.content = seoData.ogDescription;\n  }\n\n  if (seoData.ogImage) {\n    let ogImage = document.querySelector('meta[property=\"og:image\"]') as HTMLMetaElement;\n    if (!ogImage) {\n      ogImage = document.createElement('meta');\n      ogImage.setAttribute('property', 'og:image');\n      document.head.appendChild(ogImage);\n    }\n    ogImage.content = seoData.ogImage;\n  }\n}\n\nexport function createPageSEO(page: any, settings: any) {\n  const title = page?.meta_title || settings?.site_title;\n  const description = page?.meta_description || settings?.site_description;\n  \n  return {\n    title,\n    description,\n    ogTitle: title,\n    ogDescription: description\n  };\n}"],"mappings":"AASA,OAAO,SAASA,aAAaA,CAACC,OAAgB,EAAE;EAC9C;EACA,IAAIA,OAAO,CAACC,KAAK,EAAE;IACjB,MAAMA,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3BC,QAAQ,CAACD,KAAK,GAAGA,KAAK;;IAEtB;IACA,IAAIE,SAAS,GAAGD,QAAQ,CAACE,aAAa,CAAC,oBAAoB,CAAoB;IAC/E,IAAI,CAACD,SAAS,EAAE;MACdA,SAAS,GAAGD,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MAC1CF,SAAS,CAACG,IAAI,GAAG,OAAO;MACxBJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACL,SAAS,CAAC;IACtC;IACAA,SAAS,CAACM,OAAO,GAAGR,KAAK;EAC3B;;EAEA;EACA,MAAMS,eAAe,GAAGR,QAAQ,CAACE,aAAa,CAAC,0BAA0B,CAAoB;EAC7F,IAAIM,eAAe,IAAIV,OAAO,CAACW,WAAW,EAAE;IAC1CD,eAAe,CAACD,OAAO,GAAGT,OAAO,CAACW,WAAW;EAC/C;;EAEA;EACA,IAAIX,OAAO,CAACY,QAAQ,EAAE;IACpB,IAAIC,YAAY,GAAGX,QAAQ,CAACE,aAAa,CAAC,uBAAuB,CAAoB;IACrF,IAAI,CAACS,YAAY,EAAE;MACjBA,YAAY,GAAGX,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MAC7CQ,YAAY,CAACP,IAAI,GAAG,UAAU;MAC9BJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACK,YAAY,CAAC;IACzC;IACAA,YAAY,CAACJ,OAAO,GAAGT,OAAO,CAACY,QAAQ;EACzC;;EAEA;EACA,IAAIZ,OAAO,CAACc,OAAO,EAAE;IACnB,IAAIA,OAAO,GAAGZ,QAAQ,CAACE,aAAa,CAAC,2BAA2B,CAAoB;IACpF,IAAI,CAACU,OAAO,EAAE;MACZA,OAAO,GAAGZ,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MACxCS,OAAO,CAACC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;MAC5Cb,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACM,OAAO,CAAC;IACpC;IACAA,OAAO,CAACL,OAAO,GAAGT,OAAO,CAACc,OAAO;EACnC;EAEA,IAAId,OAAO,CAACgB,aAAa,EAAE;IACzB,IAAIA,aAAa,GAAGd,QAAQ,CAACE,aAAa,CAAC,iCAAiC,CAAoB;IAChG,IAAI,CAACY,aAAa,EAAE;MAClBA,aAAa,GAAGd,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MAC9CW,aAAa,CAACD,YAAY,CAAC,UAAU,EAAE,gBAAgB,CAAC;MACxDb,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACQ,aAAa,CAAC;IAC1C;IACAA,aAAa,CAACP,OAAO,GAAGT,OAAO,CAACgB,aAAa;EAC/C;EAEA,IAAIhB,OAAO,CAACiB,OAAO,EAAE;IACnB,IAAIA,OAAO,GAAGf,QAAQ,CAACE,aAAa,CAAC,2BAA2B,CAAoB;IACpF,IAAI,CAACa,OAAO,EAAE;MACZA,OAAO,GAAGf,QAAQ,CAACG,aAAa,CAAC,MAAM,CAAC;MACxCY,OAAO,CAACF,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;MAC5Cb,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACS,OAAO,CAAC;IACpC;IACAA,OAAO,CAACR,OAAO,GAAGT,OAAO,CAACiB,OAAO;EACnC;AACF;AAEA,OAAO,SAASC,aAAaA,CAACC,IAAS,EAAEC,QAAa,EAAE;EACtD,MAAMnB,KAAK,GAAG,CAAAkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,UAAU,MAAID,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,UAAU;EACtD,MAAMX,WAAW,GAAG,CAAAQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,gBAAgB,MAAIH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,gBAAgB;EAExE,OAAO;IACLvB,KAAK;IACLU,WAAW;IACXG,OAAO,EAAEb,KAAK;IACde,aAAa,EAAEL;EACjB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}