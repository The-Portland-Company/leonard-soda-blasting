{"ast":null,"code":"'use client';\n\nimport { useState } from 'react';\nimport { useEvent } from '../../utils/use-event.js';\nimport { createListCollection } from './list-collection.js';\nfunction useListCollection(props) {\n  const {\n    initialItems = [],\n    filter,\n    limit,\n    ...collectionOptions\n  } = props;\n  const create = items => {\n    return createListCollection({\n      ...collectionOptions,\n      items\n    });\n  };\n  const [collection, setCollectionImpl] = useState(() => create(limit != null ? initialItems.slice(0, limit) : initialItems));\n  const setCollection = useEvent(collection2 => {\n    setCollectionImpl(limit == null ? collection2 : collection2.copy(collection2.items.slice(0, limit)));\n  });\n  return {\n    collection,\n    filter: inputValue => {\n      if (!filter) return;\n      const filtered = create(initialItems).filter(itemString => filter(itemString, inputValue));\n      setCollection(filtered);\n    },\n    set: useEvent(items => {\n      setCollection(create(items));\n    }),\n    reset: useEvent(() => {\n      setCollection(create(initialItems));\n    }),\n    clear: useEvent(() => {\n      setCollection(create([]));\n    }),\n    insert: useEvent((index, ...items) => {\n      setCollection(collection.insert(index, ...items));\n    }),\n    insertBefore: useEvent((value, ...items) => {\n      setCollection(collection.insertBefore(value, ...items));\n    }),\n    insertAfter: useEvent((value, ...items) => {\n      setCollection(collection.insertAfter(value, ...items));\n    }),\n    remove: useEvent((...itemOrValues) => {\n      setCollection(collection.remove(...itemOrValues));\n    }),\n    move: useEvent((value, to) => {\n      setCollection(collection.move(value, to));\n    }),\n    moveBefore: useEvent((value, ...values) => {\n      setCollection(collection.moveBefore(value, ...values));\n    }),\n    moveAfter: useEvent((value, ...values) => {\n      setCollection(collection.moveAfter(value, ...values));\n    }),\n    reorder: useEvent((from, to) => {\n      setCollection(collection.reorder(from, to));\n    }),\n    append: useEvent((...items) => {\n      setCollection(collection.append(...items));\n    }),\n    prepend: useEvent((...items) => {\n      setCollection(collection.prepend(...items));\n    }),\n    update: useEvent((value, item) => {\n      setCollection(collection.update(value, item));\n    })\n  };\n}\nexport { useListCollection };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}