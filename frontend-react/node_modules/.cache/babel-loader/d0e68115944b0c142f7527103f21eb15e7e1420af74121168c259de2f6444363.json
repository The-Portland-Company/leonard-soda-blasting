{"ast":null,"code":"\"use strict\";\n\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { Combobox, useComboboxContext } from '@ark-ui/react/combobox';\nimport { forwardRef } from 'react';\nimport { cx } from '../../utils/cx.js';\nimport { createSlotRecipeContext } from '../../styled-system/create-slot-recipe-context.js';\nimport { chakra } from '../../styled-system/factory.js';\nimport { ChevronDownIcon, CloseIcon, CheckIcon } from '../icons.js';\nconst {\n  withProvider,\n  withContext,\n  useStyles: useComboboxStyles,\n  useClassNames,\n  PropsProvider\n} = createSlotRecipeContext({\n  key: \"combobox\"\n});\nconst ComboboxRootProvider = withProvider(Combobox.RootProvider, \"root\", {\n  forwardAsChild: true\n});\nconst ComboboxRoot = withProvider(Combobox.Root, \"root\", {\n  forwardAsChild: true\n});\nconst ComboboxPropsProvider = PropsProvider;\nconst ComboboxTrigger = withContext(Combobox.Trigger, \"trigger\", {\n  forwardAsChild: true,\n  forwardProps: [\"focusable\"],\n  defaultProps: {\n    children: /* @__PURE__ */jsx(ChevronDownIcon, {})\n  }\n});\nconst ComboboxPositioner = withContext(Combobox.Positioner, \"positioner\", {\n  forwardAsChild: true\n});\nconst ComboboxContent = withContext(Combobox.Content, \"content\", {\n  forwardAsChild: true\n});\nconst ComboboxInput = withContext(Combobox.Input, \"input\", {\n  forwardAsChild: true\n});\nconst ComboboxClearTrigger = withContext(Combobox.ClearTrigger, \"clearTrigger\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(CloseIcon, {})\n  }\n});\nconst ComboboxIndicatorGroup = withContext(\"div\", \"indicatorGroup\");\nconst ComboboxItemGroup = withContext(Combobox.ItemGroup, \"itemGroup\", {\n  forwardAsChild: true\n});\nconst ComboboxItemGroupLabel = withContext(Combobox.ItemGroupLabel, \"itemGroupLabel\", {\n  forwardAsChild: true\n});\nconst ComboboxItem = withContext(Combobox.Item, \"item\", {\n  forwardAsChild: true\n});\nconst ComboboxItemText = withContext(Combobox.ItemText, \"itemText\", {\n  forwardAsChild: true\n});\nconst ComboboxItemIndicator = withContext(Combobox.ItemIndicator, \"itemIndicator\", {\n  forwardAsChild: true,\n  defaultProps: {\n    children: /* @__PURE__ */jsx(CheckIcon, {})\n  }\n});\nconst ComboboxControl = withContext(Combobox.Control, \"control\", {\n  forwardAsChild: true\n});\nconst ComboboxLabel = withContext(Combobox.Label, \"label\", {\n  forwardAsChild: true\n});\nconst ComboboxEmpty = forwardRef(function ComboboxEmpty2(props, ref) {\n  const combobox = useComboboxContext();\n  const styles = useComboboxStyles();\n  const classNames = useClassNames();\n  if (combobox.collection.size !== 0) return null;\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    ...props,\n    role: \"presentation\",\n    \"data-scope\": \"combobox\",\n    \"data-part\": \"empty\",\n    className: cx(classNames.empty, props.className),\n    css: [styles.empty, props.css]\n  });\n});\nconst ComboboxContext = Combobox.Context;\nconst ComboboxItemContext = Combobox.ItemContext;\nexport { ComboboxClearTrigger, ComboboxContent, ComboboxContext, ComboboxControl, ComboboxEmpty, ComboboxIndicatorGroup, ComboboxInput, ComboboxItem, ComboboxItemContext, ComboboxItemGroup, ComboboxItemGroupLabel, ComboboxItemIndicator, ComboboxItemText, ComboboxLabel, ComboboxPositioner, ComboboxPropsProvider, ComboboxRoot, ComboboxRootProvider, ComboboxTrigger, useComboboxStyles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}