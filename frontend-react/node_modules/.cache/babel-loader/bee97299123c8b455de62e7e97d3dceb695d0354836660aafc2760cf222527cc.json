{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { dataAttr, isLeftClick, ariaAttr } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport { uuid, createSplitProps } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/password-input.anatomy.ts\nvar anatomy = createAnatomy(\"password-input\").parts(\"root\", \"input\", \"label\", \"control\", \"indicator\", \"visibilityTrigger\");\nvar parts = anatomy.build();\n\n// src/password-input.dom.ts\nvar getInputId = ctx => ctx.ids?.input ?? `p-input-${ctx.id}-input`;\nvar getInputEl = ctx => ctx.getById(getInputId(ctx));\n\n// src/password-input.connect.ts\nfunction connect(service, normalize) {\n  const {\n    scope,\n    prop,\n    context\n  } = service;\n  const visible = context.get(\"visible\");\n  const disabled = !!prop(\"disabled\");\n  const invalid = !!prop(\"invalid\");\n  const readOnly = !!prop(\"readOnly\");\n  const interactive = !(readOnly || disabled);\n  const translations = prop(\"translations\");\n  return {\n    visible,\n    disabled,\n    invalid,\n    focus() {\n      getInputEl(scope)?.focus();\n    },\n    setVisible(value) {\n      service.send({\n        type: \"VISIBILITY.SET\",\n        value\n      });\n    },\n    toggleVisible() {\n      service.send({\n        type: \"VISIBILITY.SET\",\n        value: !visible\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        htmlFor: getInputId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    },\n    getInputProps() {\n      return normalize.input({\n        ...parts.input.attrs,\n        id: getInputId(scope),\n        autoCapitalize: \"off\",\n        name: prop(\"name\"),\n        required: prop(\"required\"),\n        autoComplete: prop(\"autoComplete\"),\n        spellCheck: false,\n        readOnly,\n        disabled,\n        type: visible ? \"text\" : \"password\",\n        \"data-state\": visible ? \"visible\" : \"hidden\",\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly),\n        ...(prop(\"ignorePasswordManagers\") ? passwordManagerProps : {})\n      });\n    },\n    getVisibilityTriggerProps() {\n      return normalize.button({\n        ...parts.visibilityTrigger.attrs,\n        type: \"button\",\n        tabIndex: -1,\n        \"aria-controls\": getInputId(scope),\n        \"aria-expanded\": visible,\n        \"data-readonly\": dataAttr(readOnly),\n        disabled,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-state\": visible ? \"visible\" : \"hidden\",\n        \"aria-label\": translations?.visibilityTrigger?.(visible),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return;\n          if (!interactive) return;\n          event.preventDefault();\n          service.send({\n            type: \"TRIGGER.CLICK\"\n          });\n        }\n      });\n    },\n    getIndicatorProps() {\n      return normalize.element({\n        ...parts.indicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": visible ? \"visible\" : \"hidden\",\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-readonly\": dataAttr(readOnly)\n      });\n    }\n  };\n}\nvar passwordManagerProps = {\n  // 1Password\n  \"data-1p-ignore\": \"\",\n  // LastPass\n  \"data-lpignore\": \"true\",\n  // Bitwarden\n  \"data-bwignore\": \"true\",\n  // Dashlane\n  \"data-form-type\": \"other\",\n  // Proton Pass\n  \"data-protonpass-ignore\": \"true\"\n};\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      id: uuid(),\n      defaultVisible: false,\n      autoComplete: \"current-password\",\n      ignorePasswordManagers: false,\n      ...props2,\n      translations: {\n        visibilityTrigger(visible) {\n          return visible ? \"Hide password\" : \"Show password\";\n        },\n        ...props2.translations\n      }\n    };\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      visible: bindable(() => ({\n        value: prop(\"visible\"),\n        defaultValue: prop(\"defaultVisible\"),\n        onChange(value) {\n          prop(\"onVisibilityChange\")?.({\n            visible: value\n          });\n        }\n      }))\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  effects: [\"trackFormEvents\"],\n  states: {\n    idle: {\n      on: {\n        \"VISIBILITY.SET\": {\n          actions: [\"setVisibility\"]\n        },\n        \"TRIGGER.CLICK\": {\n          actions: [\"toggleVisibility\", \"focusInputEl\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      setVisibility({\n        context,\n        event\n      }) {\n        context.set(\"visible\", event.value);\n      },\n      toggleVisibility({\n        context\n      }) {\n        context.set(\"visible\", c => !c);\n      },\n      focusInputEl({\n        scope\n      }) {\n        const inputEl = getInputEl(scope);\n        inputEl?.focus();\n      }\n    },\n    effects: {\n      trackFormEvents({\n        scope,\n        send\n      }) {\n        const inputEl = getInputEl(scope);\n        const form = inputEl?.form;\n        if (!form) return;\n        const win = scope.getWin();\n        const controller = new win.AbortController();\n        form.addEventListener(\"reset\", event => {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"VISIBILITY.SET\",\n            value: false\n          });\n        }, {\n          signal: controller.signal\n        });\n        form.addEventListener(\"submit\", () => {\n          send({\n            type: \"VISIBILITY.SET\",\n            value: false\n          });\n        }, {\n          signal: controller.signal\n        });\n        return () => controller.abort();\n      }\n    }\n  }\n});\nvar props = createProps()([\"defaultVisible\", \"dir\", \"id\", \"onVisibilityChange\", \"visible\", \"ids\", \"getRootNode\", \"disabled\", \"invalid\", \"required\", \"readOnly\", \"translations\", \"ignorePasswordManagers\", \"autoComplete\", \"name\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}